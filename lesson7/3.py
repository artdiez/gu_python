# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cage:

    def __init__(self, cells):
        self._cells = cells

    def __str__(self):
        return str(self._cells)

    def __add__(self, other):
        return self._cells + other._cells

    def __sub__(self, other):
        return ((self._cells - other._cells) if (self._cells - other._cells) > 0 else 'Разность количества ячеек двух клеток меньше нуля!')

    def __mul__(self, other):
        return Cage(self._cells * other._cells)

    def __truediv__(self, other):
        return Cage(self._cells // other._cells)

    def make_order(self, count):
        list = []
        for i in range(1, self._cells + 1):
            list.append('*')
            if i % count == 0:
                list.append('\n')
        return ''.join(list)

cage1 = Cage(10)
cage2 = Cage(16)
print(cage1 + cage2)
print(cage1 - cage2)
print(cage2 * cage1)
print(cage2 / cage1)
print(cage2.make_order(4))
